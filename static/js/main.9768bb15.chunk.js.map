{"version":3,"sources":["../../src/PermissionContext.tsx","../../src/PermissionProvider.tsx","../../src/actions.tsx","../../src/reducer.tsx","../../src/Show.tsx","App.js","../../src/useAccess.tsx","redux/reducers.js","index.js","redux/store.js"],"names":["PermissionContext","React","PermissionProvider","props","store","children","reducerKey","dispatch","getState","subscribe","state","permissionsSelector","isLoadedSelector","useState","permissions","setPermissions","isLoaded","setIsLoaded","newState","newPermissions","newIsLoaded","JSON","value","hasPermission","allowedPermissions","checkPermission","ap","definePermission","definePermissions","type","payload","initialState","getInitialState","Show","when","fallback","rest","useContext","child","divStyle","borderBottom","padding","fontSize","App","useMemo","useAccess","useEffect","setTimeout","canRead","canWrite","canDelete","style","combineReducers","permission","action","Object","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","reducers","configureStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9768bb15.chunk.js","sourcesContent":["import React from \"react\";\n\nexport interface PermissionContextProps {\n  isLoaded: boolean;\n  hasPermission: (allowedPermissions: string[] | string) => boolean;\n  definePermission: (permissions: string[]) => void;\n  permissions: string[];\n}\n\nconst initialContext: any = {};\n\nexport const PermissionContext = React.createContext(initialContext);\n","import React, { useState } from \"react\";\nimport { definePermission as define } from \"./actions\";\nimport { PermissionContext } from \"./PermissionContext\";\n\nexport interface PermissionProviderProps {\n  store?: any;\n  children?: any;\n  reducerKey?: string;\n}\nexport const PermissionProvider = (props: PermissionProviderProps) => {\n  const { store, children, reducerKey = \"reactReduxPermission\" } = props;\n\n  if (!store) {\n    return null;\n  }\n\n  const { dispatch, getState, subscribe } = store;\n\n  const state: any = getState();\n  const permissionsSelector = (state: any) =>\n    state[reducerKey] && state[reducerKey].permissions;\n  const isLoadedSelector = (state: any) =>\n    state[reducerKey] && state[reducerKey].isLoaded;\n  const [permissions, setPermissions] = useState(permissionsSelector(state));\n  const [isLoaded, setIsLoaded] = useState(isLoadedSelector(state));\n\n  subscribe(() => {\n    const newState: any = getState();\n    const newPermissions = permissionsSelector(newState);\n    const newIsLoaded = isLoadedSelector(newState);\n\n    if (JSON.stringify(newPermissions) !== JSON.stringify(permissions)) {\n      setPermissions(newPermissions);\n    }\n\n    if (newIsLoaded !== isLoaded) {\n      setIsLoaded(newIsLoaded);\n    }\n  });\n\n  const hasPermission = (allowedPermissions: string[] | string) => {\n    if (permissions) {\n      let checkPermission = true;\n\n      if (typeof allowedPermissions === \"string\") {\n        return permissions.indexOf(allowedPermissions) !== -1;\n      }\n\n      allowedPermissions.forEach(ap => {\n        if (permissions.indexOf(ap) === -1) {\n          checkPermission = false;\n        }\n      });\n\n      return checkPermission;\n    }\n    return false;\n  };\n\n  const definePermission = (definePermissions: string[]) =>\n    dispatch(define(definePermissions));\n\n  return (\n    <PermissionContext.Provider\n      value={{\n        permissions,\n        hasPermission,\n        definePermission,\n        isLoaded: !!isLoaded\n      }}\n    >\n      {children}\n    </PermissionContext.Provider>\n  );\n};\n","export const DEFINE_PERMISSIONS = \"@@RRP:DEFINE_PERMISSIONS\";\nexport const RESET_PERMISSIONS = \"@@RRP:RESET_PERMISSIONS\";\n\nexport interface PermissionSchema {\n  isLoaded: boolean;\n  permissions: string[];\n}\n\nexport const definePermission = (payload: string[]) => ({\n  type: DEFINE_PERMISSIONS,\n  payload\n});\n\nexport const resetPermission = () => ({\n  type: RESET_PERMISSIONS,\n  payload: {}\n});\n","import {\n  PermissionSchema,\n  RESET_PERMISSIONS,\n  DEFINE_PERMISSIONS\n} from \"./actions\";\n\nconst initialState: PermissionSchema = {\n  isLoaded: false,\n  permissions: []\n};\n\nexport const getInitialState = () => JSON.parse(JSON.stringify(initialState));\n\nexport const reactReduxPermission = (\n  state = getInitialState(),\n  action: any\n) => {\n  switch (action.type) {\n    case DEFINE_PERMISSIONS:\n      return Object.assign({}, state, {\n        isLoaded: true,\n        permissions: action.payload,\n      });\n    case RESET_PERMISSIONS:\n      return getInitialState();\n    default:\n      return state;\n  }\n};\n","import React, { useContext } from \"react\";\nimport { PermissionContext, PermissionContextProps } from \"./PermissionContext\";\n\ninterface ShowProps {\n  when?: string | string[];\n  fallback?: any;\n  children?: any;\n}\n\nexport const Show = ({ when = \"\", fallback, children, ...rest }: ShowProps) => {\n  const { hasPermission }: PermissionContextProps = useContext(\n    PermissionContext\n  );\n\n  const show = hasPermission(when);\n\n  if (show) {\n    // pass any other props to the children below.. this is needed for things like wrapping <Menu.Item /> components\n    return React.Children.map(children, child =>\n      React.cloneElement(child, rest)\n    );\n  }\n\n  return fallback || null;\n};\n","import React, { useEffect } from \"react\";\nimport { Show, useAccess } from \"react-redux-permission\";\n\nconst divStyle = {\n  borderBottom: \"1px solid rgba(32,32,32,0.1)\",\n  padding: 20,\n  fontSize: 20\n};\n\nconst App = () => {\n  const { hasPermission, definePermission, isLoaded } = useAccess();\n\n  useEffect(() => {\n    setTimeout(() => {\n      definePermission([\"feature:read\", \"feature:write\"]);\n    }, 2500);\n    return () => {};\n  }, []);\n\n  const canRead = hasPermission(\"feature:read\");\n  const canWrite = hasPermission(\"feature:write\");\n  const canDelete = hasPermission(\"feature:delete\");\n\n  if (!isLoaded) return <div>LOADING...</div>;\n\n  return (\n    <div style={{ padding: 14 }}>\n      <h1>React Redux Permission </h1>\n      <p>RRP for conditional rendering of components and routes.</p>\n\n      <div style={divStyle}>feature:read Access ({`${canRead}`})</div>\n      <div style={divStyle}>feature:write Access ({`${canWrite}`})</div>\n      <div style={divStyle}>feature:delete Access ({`${canDelete}`})</div>\n\n      <Show when=\"feature:read\">\n        <div style={divStyle}>\n          i'm visible because the user has the feature:read permission.\n        </div>\n      </Show>\n      <Show when=\"feature:write\">\n        <div style={divStyle}>\n          i'm visible because the user has the feature:write permission.\n        </div>\n      </Show>\n      <Show\n\t\t\t\twhen=\"feature:delete\"\n\t\t\t\tfallback={<div style={divStyle}>I'm a fallback that's rendering because the user doesn't have access to feature:delete</div>}\n\t\t\t>\n\t\t\t\t<div style={divStyle}>i'm visible because the user has the feature:delete permission.</div>\n\t\t\t</Show>\n    </div>\n  );\n};\n\nexport default App;\n","import { useContext, useMemo } from \"react\";\nimport { PermissionContext, PermissionContextProps } from \"./PermissionContext\";\n\nexport const useAccess = () => {\n  const {\n    hasPermission: checkPermission,\n    definePermission,\n    isLoaded\n  }: PermissionContextProps = useContext(PermissionContext);\n\n  const hasPermission = (permissions: string[] | string) => {\n    return useMemo(() => checkPermission(permissions), [permissions]);\n  };\n\n  return { isLoaded, hasPermission, definePermission };\n};\n","import { combineReducers } from \"redux\";\nimport { reactReduxPermission } from \"react-redux-permission\";\n\nexport default combineReducers({\n  permission: reactReduxPermission\n});\n","import \"./index.css\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { configureStore } from \"./redux/store\";\nimport { Provider } from \"react-redux\";\nimport { PermissionProvider } from 'react-redux-permission'\n\nconst store = configureStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <PermissionProvider store={store} reducerKey=\"permission\">\n      <App />\n    </PermissionProvider>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n","import { createStore, compose } from 'redux';\nimport reducers from './reducers';\n\nexport function configureStore(initialState = {}) {\n  // @ts-ignore\n  const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\n  const store = createStore(reducers, initialState, composeEnhancers());\n  return store;\n}\n"],"sourceRoot":""}